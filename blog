# 2012-04-02
1.发出提示对准十字
2.

# 2012-04-01
# 1.基本框架已经完成,需要添加MainActivity副界面,和另一个主要界面
# 2.需要完成跳转事件等
# 3.同时需要真机测试来发现潜在的Bugs
1.MainActivity主要负责处理活动的生命周期管理,摄像头回调方法处理,SurfaceHolder回调方法处理

# 2012-03-31
1.需要真机测试摄像头转屏幕时操作,要保证转屏时图像不会重新捕获

# 2012-03-28
1.添加摄像头视图和摄像头控制类,以及相应的回调接口

# 2012-03-27
1.根据UI设计视图,总结的程序流程如下:
-首先,启动程序,开启取景界面(第一界面),摄像头不断获取图片,传输给ZXing核心进行解析,
一旦解析成功,转到第二界面
-第二界面显示捕获到的可以解析的图片信息和对该图片进行修改的按钮等视图元素
2.各个界面和他对应的类文件
-第一界面,MainActivity.java,需要按照官方文档的Building Camera App和training/camera/index.html设计代码
-第二界面,OperatingActivity.java

# 2012-03-25
1.关于android 中摄像头的使用可以参:http://p2p.wrox.com/book-professional-android-application-development-isbn-978-0-470-34471-2/72528-article-using-android-camera.html

# 2012-03-20
1.添加了themes.xml和styles.xml,为设计用户界面做准备
这两个文件的功能在于可以在styles.xml中设计一些基础界面元素的风格,
而themes.xml可以指定整个应用的基础样式
2.对assets中的三个文件进行了测试,效果不错,读取都成功,不过在模拟器上的效率并不高,
三个文件的解析有较为明显的迟滞,真机测试速度也不够快速(这个有点悲剧...)

# 2012-03-19
1.阅读androidtest/源代码,该项目已经基本完成了ZXing代码的Android移植
-scanProduct,不过不是直截调用核心代码,而是使用了Intent

# 2012-03-16
1.目前可以方便地对静态的图片进行解码,下一步需要在使用摄像头不断取景的情况下,对图片进行解码
2.ZXing进行解码的基本流程:
-首先需要获取图片,各个平台表示图片的类各不相同
-将图片转换成LuminanceSource类型
-再将LuminanceSource对象转换成ZXing内部使用的BinaryBitmap类型
-然后选取合适的Reader进行解码(调用decode方法)
-通过Result对象可以获得我们需要的String类型的数据

# 2012-03-15
1.二维码各种格式与样例,可以参考wiki:http://zh.wikipedia.org/wiki/%E4%BA%8C%E7%B6%AD%E6%A2%9D%E7%A2%BC
2.核心Reader:QRCodeReader,MultiFormatOneDReader(我们的应用可能需要的)

# 2012-03-14
1.关于核心库对外提供的接口
接口:
-Reader:用来对一张含有条码的图片进行解码,并从中获取编码在图像中的字符串
-Writer:用来生成一张条码图片
-ResultPointCallback:当一个可能的结果点被发现的时侯调用的回调方法(?)
类:
-Binarizer:提供了一系列将亮度数据转换为1位数据的方法,需要一个LuminanceSource实例作为构造参数
-BinaryBitmap:ZXing用来代表1位数据的核心类
-HtmlAssetTranslator:一个能使用Google Translate把一个目录下的html文档中的英语自动翻译的实用类
-LuminanceSource:该类的目的在于将不同平台的位图实现抽象成一个标准接口来请求灰度的亮度值
-MultiFormatReader:使用核心库的主要入口
-MultiFormatWriter:对请求的条码格式寻找合适的Writer子类的工厂类,能够将提供的内容编码成某一种条码
-Result:封装了从图像中解码出来的条码信息的类
-ResultPoint:(暂时无法理解,a point of interest in an image containing a barcode,所谓的点究竟是什么?)
-StringsResourceTranslator:又一个用Google Translate自动把Android中字符串资源翻译成其他语言的实用类
枚举:
-BarcodeFormat:枚举了所有已知(支持?)的条码格式
-DecodeHintType:封装了一些hint类型,调用者可以传递这些hint,来使得reader解码更快更准确
-EncodeHintType:一个hint集,可以传递给writer以控制Writer的行为
-ResultMetadataType:代表了解码器想要反馈给调用者的解码结果的元信息(难以理解和翻译啊!)
异常:
-一系列ZXing自行定义的异常

# 2012-03-13
1.原来zxing的接口是如此易于调用,直接调用zxing核心,解析纯图片的过程简单明了请查看ImageDecoderActivity.java
文件

# 2012-03-12
1.zxing库源代码的使用方法:
zxing 的文档十分全面,以下内容来自对文档http://code.google.com/p/zxing/wiki/GettingStarted的理解
-zxing使用ant作为整个程序的编译打包工具,源代码中的build.xml文件已经定义了若干实用的功能(task)
-zxing库使用的核心为源代码中的core文件夹,而javase文件夹中的程序是可以在pc上运行的
 运行方法:
 在先后编译core和javase后,使用命令:
 java -cp javase/javase.jar:core/core.jar com.google.zxing.client.j2se.CommandLineRunner [URL | FILE]
 (Windows用户需要将':'替换为';')
 来获得对某一个图片的解析(以上命令只支持条形码)
2.使用zxing最快,最偷懒的方法:直接下载/android移植版本,修改CaptureActivity.java即可(显然基本上有点邪恶呀!感觉就像
 在抄作业好伐,不过如果项目催的紧的话,就不要怪我用这招啦...)

# 2012-03-10
1.完成调用摄像头并显示实时图像的功能,真机测试调用成功
2.界面采用代码动态实现,而不是使用静态的xml文件,实时性更好
3.下一步预计是通过摄像头获取图片,然后调用zxing来进行识别

# 2012-03-09
1.CameraUtils.java需要提供的功能:
-查看设备是否具备了摄像头
-选择前摄像头或后摄像头的功能
-获取Camera类的对象实例
# 默认状态中,当设备有多个摄像头时,通过Camera.open()方法获得的摄像头获得的是第一个后摄像头
# Android中使用SurfaceView类来保存摄像头获得的图像,使用SufaceView和SurfaceHolder需要主义线程同步
2.CameraPreview.java的主要功能:
-主要负责摄像头的取景功能
-预计封装或者继承于SurfaceView,访问并操作SurfaceHolder
3.FileIO.java主要关注的问题在于Android系统中对文件流的操作,包括文件的读取和写入

# 2012-03-08
1.Android中自定义一个摄像头应用的步骤:
-检测并访问摄像头
-创建一个预览界面类,该类负责御览摄像头获得的图像,并显示
-建立预览布局,决定对上步创建的预览类的具体显示方法
-为开始捕获图像,比如在界面上设置一个按钮,在按下后打开摄像头开始取景
-捕获并且保存文件
-释放摄像头

# 2012-03-06
今天尝试使用http://blog.csdn.net/hellogv/article/details/6101663#comments这篇文章进行了测试
git分支名为demo_1
发现的问题:
1.wakelock似乎没有取得,导致机器会自动休眠
2.对二维码和条形码的支持都不是很理想(没有成功过,T_T!)
